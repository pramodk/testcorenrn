{load_file("nrngui.hoc")}
{load_file("defvar.hoc")}
load_file("common.hoc")

celsius = 16

begintemplate Cell
public soma, syn
create soma
objref syn
proc init() {
  soma {
    nseg=1
    diam = 5  L = 5
    insert hh
    syn = new ExpSyn(0.5)
  }
}

endtemplate Cell

ncell = 10
objref cell, cells, nc, netcons, st, stims, nclist, nil, r
pnm = new ParallelNetManager(0)
pc = pnm.pc
tvec = new Vector()
idvec = new Vector()

cells = new List()
nclist = new List()

for (gid = pc.id; gid < ncell; gid += pc.nhost) {
  r = new Random()
  r.Random123(gid, 0, 0)
  r.uniform(0,1)
  pc.set_gid2node(gid, pc.id)
  cell = new Cell()
  cell.soma pc.cell(gid, new NetCon(&cell.soma.v(.5), nil))
  //cell.syn.noiseFromRandom123(gid,2,3)
  cells.append(cell)

  // all cell syn have a source of 1000+gid%5
  nc = pc.gid_connect(1000+gid%5, cell.syn)
  nc.weight = .01 + r.repick()*.01
  nc.delay = 1 + r.repick()
  nclist.append(nc)
}

// pattern stimulation
objref tstim, gidstim, patstim
tstim = new Vector(2000) // large so do not put all on queue at once
gidstim = new Vector(2000)
gidstim.fill(2000)
for i=0, tstim.size-1 {
  tstim.x[i] = int(i/100)*5
  gidstim.x[i] = 1000+i%100
}

patstim = new PatternStim()
patstim.play(tstim, gidstim)
wopen("patstim.spk")
fprint("%d\n", tstim.size)
for i=0, tstim.size-1 {
  fprint("%g %d\n", tstim.x[i], gidstim.x[i])
}
wopen()

pc.spike_record(-1, tvec, idvec)

cvode.cache_efficient(1)
pc.set_maxstep(10)
stdinit()

if(!use_coreneuron){
   pc.nrnbbcore_write("testpatstimdat")
}
prun("--pattern patstim.spk")
spike2file()

pc.barrier()
quit()

